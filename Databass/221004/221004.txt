- 파일을 이요한 데이터 관리 : 대용량 데이터 다루기에 적합하지 x, 구조적으로 데이터를 정리하기 어려움
- 스프레드시트를 이용한 데이터 관리 : 엑셀 사용, 컬럼(열)을 통해 데이터 유형을 지정하고,
 레코드(행)을 통해 구체적인 데이터 값을 포함!
- 데이터베이스는 스프레드 시트와 달리 프로그래밍 언어를 사용해 작동시킬 수 있음, 현재 많이 사용하는 유형은
  RDB(관계형 데이터 베이스) : 각각의 데이터를 테이블에 기입함, 스프레드시트 파일 모음을 관계형 RDB라고 생각

<데이터베이스 학습 목표>
- 기능이 많기 때문에 모든 기능을 학습할 필요x, 기초적인 부분에 집중할것
- 데이터베이스에 데이터를 어떻게 입력하고, 출력하는지 : CRUD!!

<데이터베이스 정의>
- 검색을 쉽게 하기 위해 데이터를 조직화!! 
- 이 데이터베이스를 조작하는 프로그램을 DBMS라고 함 : Oracle, MySQL, SQLite 등

<RDB>
- 관계형 데이터베이스
- 오늘은 단일 테이블만 다루는 방법을 배우고
- 내일부터는 관계형 테이블 다루는 방법 알려줄 예정!!

<참고-테이블간 관계설정 예시>
- 고객 테이블 / 주문 테이블 : 이 주문이 누가 넣은 주문인지 확인하려면 참조할 고객 ID를 알아야 함!!

<RDB기본 구조>
- 쟝고 모델할때 간단하게 배웠음!
- 스키마 : 테이블의 구조(자료의 구조, 표현방법, 관계 등)
- 테이블(관계) : 필드(컬럼)와 레코드를 사용해 조직된 데이터 요소들의 집합
- 레코드(행) : 데이터 하나!
- PK(기본키) : 각 데이터를 구분할 수 있는 단일 값!! 중복될 수 없음!!
- RDBMS : SQLite, MySQL, Oracle 등등 -> 전부다 sql을 다룬다는 특징!!
- SQLite : 대규모 동시 처리 작업에는 적합하지 않음(현재 학습하는 부분정도는 커버 가능)
  어떤 환경에서나 실행 가능한 호환성이 뛰어나고, 쟝고 프레임워크의 기본 데이터베이스!

<SQL>
- Structured Query Language : RDBMS의 데이터를 관리하기 위해 설계된 특수 목적의 프로그래밍 언어
- 데이터베이스 스키마를 생성 및 수정할 수 있고, 테이블의 자료 검색 및 관리도 할 수 있음
- 한번 배워두면 데이터 관리는 그냥 다 할 수 있다고 생각하면 됨1!

<SQL Commands>
1. DDL(Data Definition Language-데이터 정의 언어) : 테이블, 스키마를 정의(생성, 수정, 삭제)하기 위한 명령어
   - CREATE
   - DROP
   - ALTER
2. DML(Data Mnipulation Language-데이터 조작 언어) : 데이터를 조작(추가, 조회, 변경, 삭제)하기 위한 명령어
   - 여기가 CRUD 부분임! 
   - INSERT
   - SELECT
   - UPDATE
   - DELETE
3. DCL(Data Control Language-데이터 제어 언어) : 데이터의 보안, 수행제어, 사용자 권한 부여 등을 정의하기 위한 언어
   - Sqlite는 파일로 관리되는 DB이기 때문에 운영체제의 파일 접근 권한으로만 제어 가능, DCL기능을 지원하지 않으므로 생략함
   - GRANT
   - REVOKE
   - COMMIT
   - ROLLBACK

<SQL Syntax>
- 모든 SQL문은 SELECT, INSERT, UPDATE 등과 같은 키워드로 시작하고, 하나의 문장은 세미콜론(;)으로 끝남!!
- 세미콜론 안 쓰면 syntax오류 남
- SQL 키워드는 대소문자를 구분하지 않지만, 대문자로 작성하는 것을 권장함
- 주석은 하이픈 2개 (--) 를 앞에 쓰면 됨!
- statement(문) : 독립적으로 실행할 수 있는 완전한 코드 조각
- Clause(절) : statement의 하위 단위
ex) SELECT column_name FROM table_name; : SELECT절과 FROM절로 이루어진 SELECT문

{DDL}
- 테이블 구조를 관리
- CREATE(생성), ALTER(수정), DROP(삭제)

<CREATE TABLE>
- 데이터베이스에 새 테이블을 만듬
- 들여쓰기보다 세미콜론이 중요하다!!
- not null : null값을 허용하지 않겠다!
CREATE TABLE 테이블 명 (
	column이름 데이터타입 제약조건,
	column이름 데이터타입 제약조건,
	column이름 데이터타입 제약조건
);
ex)
CREATE TABLE contacts (
    name TEXT NOT NULL,
    age INTEGER NOT NULL,
    email TEXT NOT NULL UNIQUE
);
- 실행하는 방법 : 실행하고자 하는 명령문에 커서를 두고 마우스 우측 버튼 -> 'Run Selected Query'선택
- PK는 따로 정의해주지 않더라도, 'rowid'라는 컬럼으로 만들어짐!!!
- 데이터 타입과 제약조건 한번 알아보자!!

<SQLite Data Types>
1. NULL : 정보가 없거나 알 수 없음을 의미
2. INTEGER : 정수
3. REAL : 실수
4. TEXT : 문자
5. BLOB(Binary Large Object) : 입력된 그대로 저장된 데이터 덩어리, 멀티미디어 파일 등
+) Boolean 타입 없음, 대신 0(false)과 1(true)로 저장된다!
+) 날짜 및 시간 저장하기 위한 타입 없음! TEXT, ReAL, INTEGER 값으로 저장할 수 있고 대신 날짜와 시간을 return하는 함수를 제공한다
+) Binary Data : 데이터의 저장과 처리를 목적으로 0과 1의 이진 형식으로 인코딩 된 파일! 기본적인 컴퓨터의 데이터 형태..
6. SQLite의 데이터 타입 결정 규칙
- 값에 둘러싸는 따옴표와 소수점 또는 지수가 없으면 INTEGER
- 작은 따옴표나 큰따옴표로 묶이면 TEXT
- 따옴표나 소수점, 지수가 없으면 REAL
- 값이 따옴표 없이 NULL이면 NULL
7. SQLite 데이터타입의 특징
- 다른 SQL엔진이 갖고있는 정적이고 엄격한 타입이 아닌 '동적 타입 시스템'을 사용함
- 컬럼에 선언된 데이터 타입에 의해서X, 컬럼에 저장된 값에 따라 데이터 타입 결정됨!!
- 선언을 정수로 했어도 내가 데이터를 문자로 넣을 수 있음!!
- 그래서 테이블 생성 시 컬럼에 대해 특정 데이터 타입을 선언하지 않아도 됨!
- 기존의 엄격한 데이터베이스에서는 불가능한 작업을 유연하게 수행할 수 있음
- but 다른 데이터베이스와의 호환성 문제가 있기 때문에 테이블 생성 시 데이터 타입을 지정하는 걸 권장
- 데이터 타입을 지정하게 되면, 입력된 데이터 타입을 지정된 데이터 타입으로 알아서 변환해줌!!
p. 60 자동변환되는 내용 정리되어 있음(외울 필요는 없다고 했는데.. 믿어도 되나?)
8. Type Affinity (타입 선호도)
- 특정 컬럼에 저장된 데이터에 권장되는 타입
- 다른 데이터베이스 엔진과의 호환성을 위해 이런 타입선호도가 존재하는 것임!!
- 다른 데이터베이스의 SQL문을 sqlite에서도 실행할 수 있게 하기 위해!!

<Constraints 제약조건>
- 입력하는 자료에 대해 제약을 정함
- 제약에 맞지 않으면 입력 거부됨!
- 데이터 베이스 내의 데이터에 대한 정확성과 일관성을 보장하기 위해!
1. NOT NULL
   - 컬럼이 Null 값을 허용하지 않도록 지정
   - 기본적으로는 Null값을 허용하기 때문에, Null값을 허용하지 않으려면 not null을 선언해 주어야함 
2. UNIQUE
   - 컬럼의 모든 값이 고유한 값이 되도록!!(중복 방지)
3. PRIMARY KEY
   - 각 테이블에는 하나의 기본 키만 있음!!
   - 암시적으로 NOT NULL 제약 조건이 포함되어 있음!!
   - INTEGER 타입에만 사용가능함!
   - 선언하지 않으면 그냥 'rowid'라는 컬럼이 만들어진다고 했음!!
4. AUTOINCREMENT
   - PK랑 같이 사용되는 제약조건!!
   - 이전에 삭제된 행의 값을 재사용하는 것을 방지함!!
   - 1, 2, 3 이라는 PK값이 있었다가 3을 삭제한 후 하나 더 추가하면 3이 아니라 4가 사용됨!!
   - 쟝고에서 테이블 생성할 때 기본적으로 사용되는 제약조건
   - 원래 sqlite에서는 삭제된 값을 재사용 함!!!
5. rowid의 특징
   - 테이블을 생성할 때 마다 rowid라는 암시적 자동 증가 컬럼이 자동으로 생성됨(1 2 3 순으로!)
   - 64비트 부호있는 정수 값
   - 새 행을 삽입할 때마다 정수값을 자동으로 할당함(1부터)
   - rowid를 대체하려면 INTEGER PRIMARY KEY컬럼 생성해줘야함!
   - INTEGER PRIMARY KEY 키워드를 가진 컬럼을 직접 만들면 이 컬럼은 rowid컬럼의 별칭이 됨!
  
<ALTER TABLE>
- 기존 테이블의 구조를 수정(변경) p. 77 ALTER TABLE statement 예시 참고!
1. ALTER TABLE RENAME : 테이블 이름 변경
   - ALTER TABLE contacts RENAME TO new_contacts;
2. ALTER TABLE RENAME : 컬럼 이름 변경
   - ALTER TABLE new_contacts RENAME COLUMN name TO last_name;
3. ALTER TABLE ADD COLUMN : 새 컬럼 추가
   - ALTER TABLE new_contacts ADD COLUMN address TEXT NOT NULL;
   - 테이블에 기존 데이터가 있을 경우 에러 발생함! default 값 넣어서 해결 가능!
   - ALTER TABLE new_contacts ADD COLUMN address TEXT NOT NULL DEFAULT 'no address';
4. ALTER TABLE DROP COLUMN : 컬럼 삭제
   - ALTER TABLE new_contacts DROP COLUMN address;
   - 컬럼이 다른 부분에서 참조되는 경우/PK인 경우/UNIQUE 제약조건 있는 경우 삭제 불가

<DROP TABLE>
- 데이터 베이스에서 테이블 제거
- DROP TABLE new_contacts;
- 존재하지 않는 테이블을 제거하면 오류 남!
- 한번에 하나의 테이블만 삭제 가능,
- 실행 취소나 복구 할 수 없으므로 각별한 주의 필요함!!! 시험에 나올듯ㅋㅋ

{DML}
- CRUD 파트!
- 오늘 배우는 내용 중에서 가장 중요한 것!
- INSERT(C), SELECT(R), UPDATE(U), DELETE(D)

<사전준비> p. 97 / 99 - 102

여기부터는 코드 직접 치면서 실습... 굳이 필기할 필요가 있나 싶음

<Simple query>
- SELECT문을 사용해 단일 테이블에서 데이터 조회하기
- SELECT 컬럼명, 컬럼명 FROM 테이블명;
- 특정 테이블에서 데이터를 조회하기 위해 사용함
- 다양한 절과 함께 사용할 수 있어 가장 어려운 SQL문이라고 할 수 있음!
p. 104 - 111

<Sorting rows>
p. 113 - 121

<Filtering data>
p. 123 - 180

<Grouping data>
p. 182 - 194

<Changing data>
p. 196 - 209


